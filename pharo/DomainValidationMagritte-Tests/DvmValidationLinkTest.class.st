"
I am used to test a validation link generated by a specific Description.
"
Class {
	#name : #DvmValidationLinkTest,
	#superclass : #TestCase,
	#traits : 'TAssertable',
	#classTraits : 'TAssertable classTrait',
	#instVars : [
		'validationObserver'
	],
	#category : 'DomainValidationMagritte-Tests-Link'
}

{ #category : #support }
DvmValidationLinkTest >> applyLink: aMetaLink toSelector: aSelector ofClass: aClass [
	"Return a holder for the context of the method linked."
	
	| contextHolder |
	
	contextHolder := self captureContextFrom: aMetaLink.
	(aClass >> aSelector) ast link: aMetaLink.
	^ contextHolder.
]

{ #category : #support }
DvmValidationLinkTest >> applyLink: aMetaLink toSelectorAst: aSelectorAst [
	"Return a holder for the context of the method linked."
	
	| contextHolder |
	
	contextHolder := self captureContextFrom: aMetaLink.
	aSelectorAst link: aMetaLink.
	^ contextHolder.
]

{ #category : #support }
DvmValidationLinkTest >> captureContextFrom: aMetaLink [ 
	
	| contextCaptured originalMetaObject originalSelector|
	
	contextCaptured := ValueHolder new.	
	originalSelector := aMetaLink selector.
	originalMetaObject := aMetaLink metaObject.
	aMetaLink selector: 'value:value:value:value:';
				metaObject: [ :operation :instrumentedObject :arguments :context |
					contextCaptured contents: context.
					originalMetaObject perform: originalSelector withArguments: {operation. instrumentedObject. arguments. context.}.
				].
	^ contextCaptured.
]

{ #category : #initialization }
DvmValidationLinkTest >> setUp [

	DvmClassToLinkValidations chain selectors;
										  collect: [ :s | (DvmClassToLinkValidations >> s) ast links ]; 
										  flattened;
										  select: #notNil;
										  do: #uninstall.
										
	validationObserver := TestObserver new.
]

{ #category : #tests }
DvmValidationLinkTest >> test_link_description_N_param_keyword_method_validation [

	| objectInstrumented contextHolder |
								
	contextHolder := self applyLink: (MAMethodDescription whereParams: { MAStringDescription new paramSelector: #p1; required: true.
	 																		 				 MANumberDescription new paramSelector: #p2; min: 20.
																							 MANumberDescription new paramSelector: #p3; min: 45
																							}) asGeneratedValidationMetaLink 
                         toSelectorAst: DvmClassToLinkValidations >> #p1:p2:p3:.
		  
	objectInstrumented := DvmClassToLinkValidations new.
	objectInstrumented p1: nil p2: 19 p3: 44.
	
 	self assertBlock: [ validationObserver isValidationSuccessful not ].
	self assertCollection: validationObserver errorArray 
	     hasSameElements: {{ DvmClassToLinkValidations name, '.p1:p2:p3:.p1.required'. objectInstrumented. contextHolder contents. }.
								 { DvmClassToLinkValidations name, '.p1:p2:p3:.p2.min'. objectInstrumented. contextHolder contents. }. 
                          { DvmClassToLinkValidations name, '.p1:p2:p3:.p3.min'. objectInstrumented. contextHolder contents. }. 
								}.

]

{ #category : #tests }
DvmValidationLinkTest >> test_link_description_binary_method_validation [

	| objectInstrumented contextHolder |
								
	contextHolder := self applyLink: (MAMethodDescription new whereParams: { MANumberDescription new accessor: #@; min: 20. }; asGeneratedValidationMetaLink) 
                         toSelector: #@																
                         ofClass: DvmClassToLinkValidations.
		  
	objectInstrumented := DvmClassToLinkValidations new.
	objectInstrumented @ 19.
	
 	self assertBlock: [ validationObserver isValidationSuccessful not ].
	self assertCollection: validationObserver errorArray  
	     hasSameElements: {{ DvmClassToLinkValidations name, '.@.@.min'. objectInstrumented. contextHolder contents. }}.

]

{ #category : #tests }
DvmValidationLinkTest >> test_link_description_binary_param_keyword_method_validation [

	| objectInstrumented contextHolder |
								
	contextHolder := self applyLink: (MAMethodDescription new whereParams: { MAStringDescription new accessor: #p1; required: true.
	 																		 					  MANumberDescription new accessor: #p2; min: 20 
																								 }; asGeneratedValidationMetaLink) 
                         toSelector: #p1:p2:																
                         ofClass: DvmClassToLinkValidations.
		  
	objectInstrumented := DvmClassToLinkValidations new.
	objectInstrumented p1: nil p2: 19.
	
 	self assertBlock: [ validationObserver isValidationSuccessful not ].
	self assertCollection: validationObserver errorArray 
	     hasSameElements: {{ DvmClassToLinkValidations name, '.p1:p2:.p1.required'. objectInstrumented. contextHolder contents. }.
								  { DvmClassToLinkValidations name, '.p1:p2:.p2.min'. objectInstrumented. contextHolder contents. } }.

]

{ #category : #tests }
DvmValidationLinkTest >> test_link_description_empty_validation [

	| objectInstrumented contextHolder |
	
	contextHolder := self applyLink: (MAMagnitudeDescription new accessor: #p1; empty: false; asGeneratedValidationMetaLink) 
	                      toSelector: #p1:
		                   ofClass: DvmClassToLinkValidations.
		
	objectInstrumented := DvmClassToLinkValidations new.
	objectInstrumented p1: {}.
	self assertBlock: [ validationObserver isValidationSuccessful not ].
	self assertCollection: validationObserver errorArray 
	     hasSameElements: { { DvmClassToLinkValidations name, '.p1:.p1.empty'. objectInstrumented. contextHolder contents. } }.



]

{ #category : #tests }
DvmValidationLinkTest >> test_link_description_min_validation [

	| objectInstrumented contextHolder |
	
	contextHolder := self applyLink: (MANumberDescription new accessor: #p1; min: 20; asGeneratedValidationMetaLink) 
	                      toSelector: #p1:
		                   ofClass: DvmClassToLinkValidations.
		
	objectInstrumented := DvmClassToLinkValidations new.
	objectInstrumented p1: 19.
	self assertBlock: [ validationObserver isValidationSuccessful not ].
	self assertCollection: validationObserver errorArray 
	     hasSameElements: { { DvmClassToLinkValidations name, '.p1:.p1.min'. objectInstrumented. contextHolder contents. } }.



]

{ #category : #tests }
DvmValidationLinkTest >> test_link_description_required_validation [

	| objectInstrumented contextHolder |
	
	contextHolder := self applyLink: (MAStringDescription new accessor: #p1; required: true; asGeneratedValidationMetaLink)
	                      toSelector: #p1:
		                   ofClass: DvmClassToLinkValidations.
		
	objectInstrumented := DvmClassToLinkValidations new.
   objectInstrumented p1: nil.

	self assertBlock: [ validationObserver isValidationSuccessful not ].
	self assertCollection: validationObserver errorArray  
        hasSameElements: { { DvmClassToLinkValidations name, '.p1:.p1.required'. objectInstrumented. contextHolder contents. } }.
]
